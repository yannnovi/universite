///////////////////////////////////////////////////////////////////////////////
//$Id: exceptions.h,v 1.3 2004/03/27 15:50:06 yann Exp $                     
//Auteur : Yann Bourdeau (BOUY06097202)
///////////////////////////////////////////////////////////////////////////////
#ifndef EXCEPTION_H__
#define EXCEPTION_H__
#include <exception>
using namespace std;

///////////////////////////////////////////////////////////////////////////////
// Classe exception_de_Base
// Cette classe sert de parent a toute les exceptions definis dans ce source.
///////////////////////////////////////////////////////////////////////////////
class ExceptionDeBase : public exception
{
private:
	string message;
public:
///////////////////////////////////////////////////////////////////////////////
// Constructeur
// PARAMETRE: char* pErreur: Message contenant la description de l'exception.
///////////////////////////////////////////////////////////////////////////////
    ExceptionDeBase(const char *pErreur):exception()
    {
		message=pErreur;
    }

///////////////////////////////////////////////////////////////////////////////
// Methode what
// Retourne la message d'exception.
// PARAMETRE: AUCUN
// RETOURNE: char * : Le message d'erreur
///////////////////////////////////////////////////////////////////////////////
    const char *what() const
    {
        return message.c_str();
    }

};



///////////////////////////////////////////////////////////////////////////////
// Classe ExceptionManqueMemoire
// Cette classe sert d'exception dans le cas qu'il y a un manque de memoire.
///////////////////////////////////////////////////////////////////////////////
class ExceptionManqueMemoire: public ExceptionDeBase
{
public:
    ///////////////////////////////////////////////////////////////////////////////
    // Constructeur
    // Parametre: char *pMsg: Message expliquant l'erreur de l'exception.
    ///////////////////////////////////////////////////////////////////////////////
    ExceptionManqueMemoire(const char *pMsg):ExceptionDeBase(pMsg)  
    {

    }
};

///////////////////////////////////////////////////////////////////////////////
// Classe ExceptionFichier
// Cette classe sert d'erreur sur un fichier
///////////////////////////////////////////////////////////////////////////////
class ExceptionFichier: public ExceptionDeBase
{
    char fichier[255]; // contient le nom du fichier
public:
    ///////////////////////////////////////////////////////////////////////////////
    // Constructeur
    // Parametre: char* pMsg: Nom du fichier qui ne s'ouvre pas.
    ///////////////////////////////////////////////////////////////////////////////
    ExceptionFichier(const char *pMsg,const char *pFichier):ExceptionDeBase(pMsg)
    {
        strncpy(fichier,pFichier,255);
    }
    
    ///////////////////////////////////////////////////////////////////////////////
    // Methode getNomFichier
    // Retourne le nom du fichier en erreur.
    // PARAMETRE: aucun
    // Retourne: char *: Nom du fichier en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    const char *getNomFichier(void)  const
    {
        return fichier;
    }
};

///////////////////////////////////////////////////////////////////////////////
// Classe ExceptionEnregistremenInvalide
// Cette classe sert d'erreur lorsqu'il y a une enregistrement invalide
// dans un fichier.
///////////////////////////////////////////////////////////////////////////////
class ExceptionEnregistrementInvalide: public ExceptionDeBase
{
    char fichier[255]; // contient le nom du fichier
    int ligne; // Ligne dans le fichier
public:
    ///////////////////////////////////////////////////////////////////////////////
    // Constructeur
    // Parametre: char* pMsg: Nom du fichier qui ne s'ouvre pas.
    ///////////////////////////////////////////////////////////////////////////////
    ExceptionEnregistrementInvalide(const char *pMsg,const char *pFichier,int ligne) : ExceptionDeBase(pMsg)
    {
        strncpy(fichier,pFichier,255);
        this->ligne=ligne;
    }
    
    ///////////////////////////////////////////////////////////////////////////////
    // Methode getNomFichier
    // Retourne le nom du fichier en erreur.
    // PARAMETRE: aucun
    // Retourne: char *: Nom du fichier en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    const char *getNomFichier(void) const
    {
        return fichier;
    }

    ///////////////////////////////////////////////////////////////////////////////
    // Methode getLigne
    // Retourne la ligne en erreur.
    // PARAMETRE: aucun
    // Retourne: int: ligne en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    int getLigne(void) const
    {
        return ligne;
    }

};

///////////////////////////////////////////////////////////////////////////////
// Classe ExceptionInscriptionCours
// Cette classe sert d'erreur lorsque qu'on ajoute un cours a la classe Dossier
// Etudiant
///////////////////////////////////////////////////////////////////////////////
class ExceptionInscriptionCours: public ExceptionDeBase
{
public:
    ///////////////////////////////////////////////////////////////////////////////
    // Constructeur
    // Parametre: char* pMsg: Message d'erreur.
    //            TypSigle cours: Sigle du cours en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    ExceptionInscriptionCours(const char *pMsg,TypSigle cours) : ExceptionDeBase(pMsg)
    {
        this->cours=cours;
    }

    ///////////////////////////////////////////////////////////////////////////////
    // Retourne le cours en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    TypSigle getCours(void)
    {
        return cours;
    }
private:
    TypSigle cours;
};

///////////////////////////////////////////////////////////////////////////////
// Classe ExceptionRetraitCours
// Cette classe sert d'erreur lorsque qu'on ajoute un cours a la classe Dossier
// Etudiant
///////////////////////////////////////////////////////////////////////////////
class ExceptionRetraitCours: public ExceptionDeBase
{
public:
    ///////////////////////////////////////////////////////////////////////////////
    // Constructeur
    // Parametre: char* pMsg: Message d'erreur.
    //            TypSigle cours: Sigle du cours en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    ExceptionRetraitCours(const char *pMsg,TypSigle cours) : ExceptionDeBase(pMsg)
    {
        this->cours=cours;
    }

    ///////////////////////////////////////////////////////////////////////////////
    // Retourne le cours en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    TypSigle getCours(void)
    {
        return cours;
    }

private:
    TypSigle cours;
};

///////////////////////////////////////////////////////////////////////////////
// Classe ExceptionCoursInexistant
// Cette classe sert d'erreur lorsque qu'on ajoute un cours qui n'existe pas
///////////////////////////////////////////////////////////////////////////////
class ExceptionCoursInexistant: public ExceptionDeBase
{
public:
    ///////////////////////////////////////////////////////////////////////////////
    // Constructeur
    // Parametre: char* pMsg: Message d'erreur.
    //            TypSigle cours: Sigle du cours en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    ExceptionCoursInexistant(const char *pMsg,string cours) : ExceptionDeBase(pMsg)
    {
        this->cours=cours;
    }

    ///////////////////////////////////////////////////////////////////////////////
    // Retourne le cours en erreur.
    ///////////////////////////////////////////////////////////////////////////////
    string getCours(void)
    {
        return cours;
    }
private:
    string cours;
};

#endif
